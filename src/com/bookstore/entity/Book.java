package com.bookstore.entity;
// Generated Sep 3, 2020 10:50:24 AM by Hibernate Tools 5.2.12.Final


import java.util.Base64;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

/**
 * Book generated by hbm2java
 */
@Entity
@NamedQueries( { 
		 @NamedQuery(name = "book.listAll" , query = "SELECT b FROM Book b ORDER BY b.title" )  , 
		 @NamedQuery(name = "book.count" , query = "SELECT Count(b) FROM Book b" )   , 
		 @NamedQuery(name  ="book.countByCategory"  , query = "SELECT Count(b) FROM Book b WHERE b.category.categoryId = :categoryId ") , 

		 @NamedQuery(name = "book.findByTitle" , query  = "SELECT b FROM Book b WHERE b.title = :title") ,
		 @NamedQuery(name = "book.listByCategory" , 
		 query = "SELECT b FROM Book b JOIN"
		 		+ " Category c ON b.category.categoryId = c.categoryId AND c.categoryId = :categoryId") ,
		 @NamedQuery(name ="book.listNew" , query = "SELECT b FROM Book b ORDER BY b.puplishDate DESC") , 
		 @NamedQuery(name = "book.search" , query ="SELECT b FROM Book b WHERE"
		 		+ " b.title LIKE '%' || :keyword || '%'"
		 		+ " OR b.author LIKE '%' || :keyword || '%'"
		 		+ " OR b.description LIKE '%' || :keyword || '%' ") 
		 
		 
}
		 )
		 
		
@Table(name = "book", catalog = "bookstoredb", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
public class Book implements java.io.Serializable {

	private Integer bookId;
	private Category category;
	private String title;
	private String author;
	private String description;
	private String isbn;
	private byte[] image;
	private String base64Image ; 
	private float price;
	private Date puplishDate;
	private Date lastUpdateTime;
	private Set<Review> reviews = new HashSet<Review>(0);
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public Book(Integer id) { 
		this.bookId = id ; 
	}
	public Book() {
	}

	public Book(Category category, String title, String author, String description, String isbn, byte[] image,
			float price, Date puplishDate, Date lastUpdateTime) {
		this.category = category;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.puplishDate = puplishDate;
		this.lastUpdateTime = lastUpdateTime;
	}

	public Book(Category category, String title, String author, String description, String isbn, byte[] image,
			float price, Date puplishDate, Date lastUpdateTime, Set<Review> reviews, Set<OrderDetail> orderDetails) {
		this.category = category;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.puplishDate = puplishDate;
		this.lastUpdateTime = lastUpdateTime;
		this.reviews = reviews;
		this.orderDetails = orderDetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "book_id", unique = true, nullable = false)
	public Integer getBookId() {
		return this.bookId;
	}

	public void setBookId(Integer bookId) {
		this.bookId = bookId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id", nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "title", unique = true, nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "author", nullable = false, length = 64)
	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Column(name = "description", nullable = false, length = 2000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "isbn", nullable = false, length = 15)
	public String getIsbn() {
		return this.isbn;
	}

	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	@Column(name = "image", nullable = false)
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "price", nullable = false, precision = 12, scale = 0)
	public float getPrice() {
		return this.price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "puplish_date", nullable = false, length = 10)
	public Date getPuplishDate() {
		return this.puplishDate;
	}

	public void setPuplishDate(Date puplishDate) {
		this.puplishDate = puplishDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update_time", nullable = false, length = 19)
	public Date getLastUpdateTime() {
		return this.lastUpdateTime;
	}

	public void setLastUpdateTime(Date lastUpdateTime) {
		this.lastUpdateTime = lastUpdateTime;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "book")
	public Set<Review> getReviews() {
		
		TreeSet<Review> sorted = new TreeSet<Review>(new Comparator<Review>() {
			
			@Override
			public int compare(Review review1, Review review2) {
				return review2.getReviewTime().compareTo(review1.getReviewTime()) ; 
			}
		});
		sorted.addAll(this.reviews) ; 
		return sorted;
		
	}

	public void setReviews(Set<Review> reviews) {
		this.reviews = reviews;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "book")
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}
   @Transient
   public String getBase64Image() { 
	   if(base64Image != null)
		   return base64Image ; 
	   return Base64.getEncoder().encodeToString(this.image) ; 
	   
   }
  
   @Transient
   public void setBase64Image(String base64Image) { 
	   this.base64Image = base64Image ; 
			   
   }
   @Transient
   public float getAveraeRating() { 
	   float avr = 0.0f ; 
	   
	   float sum = 0; 
	   
	   if(reviews.isEmpty()) { 
		   return 0.0f ; 
	   }
	   
	   for(Review r : reviews) { 
		   sum += r.getRating() ; 
	   }
	   
	  return sum / reviews.size() ; 
   }
   
   @Transient
   public String getRatinString2(float rating) { 
	   String res  = "";  
	   int numOfStars = (int) rating ; 
	   for(int i = 0 ; i < numOfStars ; i++) { 
		   res += "on," ;
		   
	   }
	   
	   int next = numOfStars + 1 ; 
	   if(rating > numOfStars) { 
		   res += "half," ;
		   next ++ ; 
	   }
	 
	   
	   for(int i = next ; i <= 5 ; i ++) { 
		   res += "off," ; 
		   
	   }
	   
	   return res.substring(0 , res.length() -1) ; 
    }
   @Transient
   public String[] getRatingStars() {

	   String tokens [] = {"off" , "off" , "off" , "off" , "off"} ; 
	   float rating = getAveraeRating() ; 
	   for(int i = 0 ; i < tokens.length ; i++) { 
		   if(rating == 0) break ; 
		   
		   if(rating >= 1 ) { 
			   tokens[i] = "on" ; 
		   }else { 
			   tokens[i] = "half" ; 
			   break ; 
		   }
		   rating -- ;
	   }
	  
	   return tokens ; 
   }

@Override
public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result + ((bookId == null) ? 0 : bookId.hashCode());
	return result;
}

@Override
public boolean equals(Object obj) {
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	Book other = (Book) obj;
	if (bookId == null) {
		if (other.bookId != null)
			return false;
	} else if (!bookId.equals(other.bookId))
		return false;
	return true;
}
   
   
   
}
